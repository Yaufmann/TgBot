import telebot
from telebot import types
import webbrowser
import sqlite3


bot = telebot.TeleBot('')

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect('user_cards.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    full_name TEXT,
    height REAL,
    weight REAL,
    age INTEGER,
    activities TEXT
)
''')
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
   chat_id = message.chat.id

   cursor.execute('SELECT * FROM users WHERE user_id = ?', (chat_id,))
   user = cursor.fetchone()

   markup = types.InlineKeyboardMarkup() 

   if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        btn_show = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∫–∞—Ä—Ç–æ—á–∫—É',callback_data='show_card')
        markup.add(btn_show)
        bot.send_message(
            chat_id,
            "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë.",
            reply_markup=markup
        )
   else:
      btn_create = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      markup.add(btn_create)
    
      commands_text = """
<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º

/myinfo - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∫–∞—Ä—Ç–æ—á–∫—É

/help - –ü–æ–º–æ—â—å

"""
      bot.send_message(chat_id, commands_text, parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
def create_card(message):
    user_data[message.chat.id] = {}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    bot.register_next_step_handler(msg, process_full_name)

def process_full_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['full_name'] = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    bot.register_next_step_handler(msg, process_height)

def process_height(message):
    chat_id = message.chat.id
    try:
        height = float(message.text)
        user_data[chat_id]['height'] = height
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
        bot.register_next_step_handler(msg, process_weight)
    except ValueError:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")
        bot.register_next_step_handler(msg, process_height)

def process_weight(message):
    chat_id = message.chat.id
    try:
        weight = float(message.text)
        user_data[chat_id]['weight'] = weight
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        bot.register_next_step_handler(msg, process_age)
    except ValueError:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")
        bot.register_next_step_handler(msg, process_weight)

def process_age(message):
    chat_id = message.chat.id
    try:
        age = int(message.text)
        user_data[chat_id]['age'] = age
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥—ã –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        bot.register_next_step_handler(msg, process_activities)
    except ValueError:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        bot.register_next_step_handler(msg, process_age)

def process_activities(message):
    chat_id = message.chat.id
    user_data[chat_id]['activities'] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    INSERT INTO users (user_id, full_name, height, weight, age, activities)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (chat_id, 
          user_data[chat_id]['full_name'], 
          user_data[chat_id]['height'], 
          user_data[chat_id]['weight'], 
          user_data[chat_id]['age'], 
          user_data[chat_id]['activities']))
    conn.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    btn_show = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∫–∞—Ä—Ç–æ—á–∫—É', callback_data='show_card')
    markup.add(btn_show)
    
    bot.send_message(chat_id, "–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myinfo
@bot.message_handler(commands=['myinfo'])
def myinfo(message):
    chat_id = message.chat.id
    cursor.execute('SELECT * FROM users WHERE user_id = ? ORDER BY id DESC LIMIT 1', (chat_id,))
    user = cursor.fetchone()
    
    if user:
        show_card_info(chat_id, user)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∫–∞—Ä—Ç–æ—á–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == 'show_card')
def callback_show_card(call):
    chat_id = call.message.chat.id
    cursor.execute('SELECT * FROM users WHERE user_id = ? ORDER BY id DESC LIMIT 1', (chat_id,))
    user = cursor.fetchone()
    
    if user:
        show_card_info(chat_id, user)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'.")

def show_card_info(chat_id, user):
    card_info = f"""
üìã –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:

–§–ò–û: {user[2]}
–†–æ—Å—Ç: {user[3]} —Å–º
–í–µ—Å: {user[4]} –∫–≥
–í–æ–∑—Ä–∞—Å—Ç: {user[5]} –ª–µ—Ç
–í–∏–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user[6]}
"""
    bot.send_message(chat_id, card_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help(message):
    help_text = """

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/myinfo - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∫–∞—Ä—Ç–æ—á–∫—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

"""
    bot.send_message(message.chat.id, help_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()

