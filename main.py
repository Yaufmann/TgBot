import telebot
from telebot import types
import webbrowser
import sqlite3


bot = telebot.TeleBot('7704891499:AAE8fLE75VJXDaPzFmc6fRxFFlUmSQlNi3I')

name = None
age = None
height = None
weight = None

@bot.message_handler(commands=['start'])
def start(message) :
   conn = sqlite3.connect('mainDB.sql')
   cursor = conn.cursor()

   cursor.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(70), age int, height int, weight int, activities varchar(250))')
   conn.commit()
   cursor.close()
   conn.close()

   markup = types.InlineKeyboardMarkup()
   btn1 = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞', callback_data='create')
   markup.row(btn1)
   bot.send_message(message.chat.id, f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç {message.from_user.first_name} !</b>\n\n –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ - /info\n\n –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –≤–≤–µ–¥–∏—Ç–µ - /update\n\n –î–ª—è –ø—Ä–æ—Å–æ–º—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ - /teams\n\n –î–ª—è –ø–æ–º–æ—â–∏ –ø–æ –±–æ—Ç—É - /help',parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)   
def callback_message(callback):
   if callback.data == 'create':
      bot.send_message(callback.message.chat.id, "–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û :")
      bot.register_next_step_handler(callback.message, user_name)

def user_name(message):
   global name
   name = message.text.strip()
   bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç :")
   bot.register_next_step_handler(message, user_age)

def user_age(message):
   global age
   age = message.text.strip()
   bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç :")
   bot.register_next_step_handler(message, user_height)

def user_height(message):
   global height
   height = message.text.strip()
   bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å :")
   bot.register_next_step_handler(message, user_weight)

def user_weight(message):
   global weight
   weight = message.text.strip()
   bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ :")
   bot.register_next_step_handler(message, user_activities)

def user_activities(message):
   activities = message.text.strip()

   conn = sqlite3.connect('mainDB.sql')
   cursor = conn.cursor()

   cursor.execute(f"INSERT INTO users (name, age, height, weight, activities) VALUES ('%s', '%s', '%s', '%s', '%s')" % (name, age, height, weight, activities))
   conn.commit()

   user_id = message.from_user.id

   markup = types.InlineKeyboardMarkup()
   markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É', callback_data='open_card'))
   
   bot.send_message(message.chat.id, "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>", parse_mode='html', reply_markup=markup)

   cursor.close()
   conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'open_card')
def open_card(call):
      bot.answer_callback_query(call.id)

      user_id = call.from_user.id

      conn = sqlite3.connect('mainDB.sql')
      cursor = conn.cursor()

      cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
      user_data = cursor.fetchone()

      if user_data:
         info = f"""
         üìå <b>–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞</b> üìå
            
         üë§ –ò–º—è: {user_data[1]}
         üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[2]}
         üìè –†–æ—Å—Ç: {user_data[3]}
         ‚öñÔ∏è –í–µ—Å: {user_data[4]}
         üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data[5]}
            """
         bot.send_message(call.message.chat.id, info, parse_mode='HTML')

      cursor.close()
      conn.close()


@bot.message_handler(commands=['menu'])
def menu(message) :
   markup = types.ReplyKeyboardMarkup()
   btn1 = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É')
   markup.row(btn1)
   btn2 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
   btn3 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µx –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
   markup.row(btn2,btn3)
   bot.send_message(message.chat.id, '–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π' , reply_markup=markup)
   bot.register_next_step_handler(message, on_click)

def on_click(message): 
   if message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É':
      user_id = message.from_user.id

      conn = sqlite3.connect('mainDB.sql')
      cursor = conn.cursor()

      cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
      
      users = cursor.fetchall()

      # info = ''
      # for el in users:
      #    info+= f'{el[1]}\n\n –í–æ–∑—Ä–∞—Å—Ç: {el[2]}\n\n –†–æ—Å—Ç: {el[3]}\n\n –í–µ—Å: {el[4]}\n\n –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {el[5]}\n\n'
      
      if users:
         info = f"""
         –ò–º—è: {users[1]}
         –í–æ–∑—Ä–∞—Å—Ç: {users[2]}
         –†–æ—Å—Ç: {users[3]}
         –í–µ—Å: {users[4]}
         –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {users[5]}
         """
         bot.send_message(message.chat.id, info)

      cursor.close()
      conn.close()

      # bot.send_message(message.chat.id, users)

   if message.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
      bot.send_message(message.chat.id, '–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')

   if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µx –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':

      conn = sqlite3.connect('mainDB.sql')
      cursor = conn.cursor()

      cursor.execute('SELECT * FROM users')
      users = cursor.fetchall()

      info = ''
      for el in users:
         info+= f'{el[1]}\n\n –í–æ–∑—Ä–∞—Å—Ç: {el[2]}\n\n –†–æ—Å—Ç: {el[3]}\n\n –í–µ—Å: {el[4]}\n\n –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {el[5]}\n\n'
      
      cursor.close()
      conn.close()
   
      bot.send_message(message.chat.id, info)
   

@bot.message_handler(commands=['site'])
def site(message) :
   bot.send_message(message.chat.id, '<b>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–∞–π—Ç </b>', parse_mode='html')
   webbrowser.open('https://minudo.ru/')


@bot.message_handler(commands=['help'])
def main(message) :
   bot.send_message(message.chat.id, '<b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å ?</b>', parse_mode='html')

@bot.message_handler()
def info(m):
   if m.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
      bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name} {m.from_user.last_name}')
   elif m.text.lower() == 'id':
      bot.reply_to(m, f'–¢–≤–æ–π –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä: {m.from_user.id}')

@bot.message_handler(content_types=['photo'])
def get_photo(message) :
   markup = types.InlineKeyboardMarkup()
   btn1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://minudo.ru/')
   markup.row(btn1)
   btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='delete')
   btn3 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit')
   markup.row(btn2,btn3)
   bot.reply_to(message, "–≠—Ç–æ –≤–∞—à–µ —Ñ–æ—Ç–æ", reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)   
def callback_message(callback):
   if callback.data == 'delete':
      bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
   elif callback == 'edit':
      bot.edit_message_text('Edit text',callback.message.chat.id, callback.message.message_id)


bot.polling(none_stop=True)